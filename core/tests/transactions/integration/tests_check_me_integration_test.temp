from rest_framework.test import APITestCase, APIClient
from rest_framework import status
from django.urls import reverse
from transactions.models import Transaction

class CreateTransactionTestCase(APITestCase):
    def setUp(self):
        self.client = APIClient()
        self.url = reverse('transaction-list')  # Adjust the name according to your URL definition
        self.valid_payload = {
            'amount': 100.0,
            'type': 'income',
            'category': 'salary',
            'description': 'Salary for the month',
            '_user': 'user-id-here'  # Replace with a valid user UUID
        }
        self.invalid_payload = {
            'amount': '',
            'type': 'income',
            'category': 'salary',
            'description': 'Invalid transaction',
            '_user': 'user-id-here'
        }

    def test_create_transaction_success(self):
        """
        Ensure we can create a transaction successfully.
        """
        response = self.client.post(self.url, data=self.valid_payload, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Transaction.objects.count(), 1)
        self.assertEqual(response.data['amount'], self.valid_payload['amount'])

    def test_create_transaction_invalid_data(self):
        """
        Ensure validation errors are thrown for invalid data.
        """
        response = self.client.post(self.url, data=self.invalid_payload, format='json')
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
        self.assertIn('amount', response.data)  # Check if 'amount' field is mentioned in the error response
